// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stackconfig.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on StackConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StackConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Version

	// no validation rules for AppId

	// no validation rules for AppName

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StackConfigValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetDispatchConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StackConfigValidationError{
				field:  "DispatchConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// StackConfigValidationError is the validation error returned by
// StackConfig.Validate if the designated constraints aren't met.
type StackConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StackConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StackConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StackConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StackConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StackConfigValidationError) ErrorName() string { return "StackConfigValidationError" }

// Error satisfies the builtin error interface
func (e StackConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStackConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StackConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StackConfigValidationError{}

// Validate checks the field values on ServiceConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Version

	// no validation rules for ServiceId

	// no validation rules for Runtime

	if v, ok := interface{}(m.GetRuntimeConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceConfigValidationError{
				field:  "RuntimeConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAutomaticScaling()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceConfigValidationError{
				field:  "AutomaticScaling",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetManualScaling()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceConfigValidationError{
				field:  "ManualScaling",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNetwork()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceConfigValidationError{
				field:  "Network",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceConfigValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLivenessChecks()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceConfigValidationError{
				field:  "LivenessChecks",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetReadynessChecks()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceConfigValidationError{
				field:  "ReadynessChecks",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DefaultExpiration

	for idx, item := range m.GetEnvVariables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceConfigValidationError{
					field:  fmt.Sprintf("EnvVariables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetErrorHandlers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceConfigValidationError{
					field:  fmt.Sprintf("ErrorHandlers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHandlers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceConfigValidationError{
					field:  fmt.Sprintf("Handlers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for InboundService

	if v, ok := interface{}(m.GetGit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceConfigValidationError{
				field:  "Git",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDatabases() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceConfigValidationError{
					field:  fmt.Sprintf("Databases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ServiceConfigValidationError is the validation error returned by
// ServiceConfig.Validate if the designated constraints aren't met.
type ServiceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceConfigValidationError) ErrorName() string { return "ServiceConfigValidationError" }

// Error satisfies the builtin error interface
func (e ServiceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceConfigValidationError{}

// Validate checks the field values on RuntimeConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RuntimeConfig) Validate() error {
	if m == nil {
		return nil
	}

	switch m.RuntimeConfigs.(type) {

	case *RuntimeConfig_Python27Config:

		if v, ok := interface{}(m.GetPython27Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuntimeConfigValidationError{
					field:  "Python27Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RuntimeConfig_RubyConfig:

		if v, ok := interface{}(m.GetRubyConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuntimeConfigValidationError{
					field:  "RubyConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RuntimeConfig_NodeConfig:

		if v, ok := interface{}(m.GetNodeConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuntimeConfigValidationError{
					field:  "NodeConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RuntimeConfigValidationError is the validation error returned by
// RuntimeConfig.Validate if the designated constraints aren't met.
type RuntimeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeConfigValidationError) ErrorName() string { return "RuntimeConfigValidationError" }

// Error satisfies the builtin error interface
func (e RuntimeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeConfigValidationError{}

// Validate checks the field values on Python27Config with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Python27Config) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApiVersion

	// no validation rules for AutoIdPolicy

	for idx, item := range m.GetBuiltins() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Python27ConfigValidationError{
					field:  fmt.Sprintf("Builtins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetFramework()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Python27ConfigValidationError{
				field:  "Framework",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOrms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Python27ConfigValidationError{
					field:  fmt.Sprintf("Orms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLibraries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Python27ConfigValidationError{
					field:  fmt.Sprintf("Libraries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// Python27ConfigValidationError is the validation error returned by
// Python27Config.Validate if the designated constraints aren't met.
type Python27ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Python27ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Python27ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Python27ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Python27ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Python27ConfigValidationError) ErrorName() string { return "Python27ConfigValidationError" }

// Error satisfies the builtin error interface
func (e Python27ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPython27Config.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Python27ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Python27ConfigValidationError{}

// Validate checks the field values on RubyConfig with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RubyConfig) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntrypoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RubyConfigValidationError{
				field:  "Entrypoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFramework()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RubyConfigValidationError{
				field:  "Framework",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOrms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RubyConfigValidationError{
					field:  fmt.Sprintf("Orms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLibraries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RubyConfigValidationError{
					field:  fmt.Sprintf("Libraries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RubyConfigValidationError is the validation error returned by
// RubyConfig.Validate if the designated constraints aren't met.
type RubyConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RubyConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RubyConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RubyConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RubyConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RubyConfigValidationError) ErrorName() string { return "RubyConfigValidationError" }

// Error satisfies the builtin error interface
func (e RubyConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRubyConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RubyConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RubyConfigValidationError{}

// Validate checks the field values on NodeConfig with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NodeConfig) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntrypoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeConfigValidationError{
				field:  "Entrypoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFramework()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeConfigValidationError{
				field:  "Framework",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOrms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeConfigValidationError{
					field:  fmt.Sprintf("Orms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLibraries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeConfigValidationError{
					field:  fmt.Sprintf("Libraries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NodeConfigValidationError is the validation error returned by
// NodeConfig.Validate if the designated constraints aren't met.
type NodeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeConfigValidationError) ErrorName() string { return "NodeConfigValidationError" }

// Error satisfies the builtin error interface
func (e NodeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeConfigValidationError{}

// Validate checks the field values on Network with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Network) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InstanceTag

	// no validation rules for Name

	// no validation rules for SubnetworkName

	// no validation rules for SessionAffinity

	for idx, item := range m.GetForwardedPorts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NetworkValidationError{
					field:  fmt.Sprintf("ForwardedPorts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NetworkValidationError is the validation error returned by Network.Validate
// if the designated constraints aren't met.
type NetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkValidationError) ErrorName() string { return "NetworkValidationError" }

// Error satisfies the builtin error interface
func (e NetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Resource) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetCpu(); val < 1 || val >= 96 {
		return ResourceValidationError{
			field:  "Cpu",
			reason: "value must be inside range [1, 96)",
		}
	}

	// no validation rules for MemoryGb

	if val := m.GetDiskSizeGb(); val < 10 || val > 10240 {
		return ResourceValidationError{
			field:  "DiskSizeGb",
			reason: "value must be inside range [10, 10240]",
		}
	}

	for idx, item := range m.GetVolumes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  fmt.Sprintf("Volumes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on Builtin with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Builtin) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BuiltinKeys

	// no validation rules for BuiltinValues

	return nil
}

// BuiltinValidationError is the validation error returned by Builtin.Validate
// if the designated constraints aren't met.
type BuiltinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuiltinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuiltinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuiltinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuiltinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuiltinValidationError) ErrorName() string { return "BuiltinValidationError" }

// Error satisfies the builtin error interface
func (e BuiltinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuiltin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuiltinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuiltinValidationError{}

// Validate checks the field values on ErrorHandler with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ErrorHandler) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ErrorCode

	// no validation rules for File

	return nil
}

// ErrorHandlerValidationError is the validation error returned by
// ErrorHandler.Validate if the designated constraints aren't met.
type ErrorHandlerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorHandlerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorHandlerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorHandlerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorHandlerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorHandlerValidationError) ErrorName() string { return "ErrorHandlerValidationError" }

// Error satisfies the builtin error interface
func (e ErrorHandlerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorHandler.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorHandlerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorHandlerValidationError{}

// Validate checks the field values on Handler with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Handler) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	// no validation rules for Script

	// no validation rules for Login

	// no validation rules for ApplicationReadable

	// no validation rules for AuthFailAction

	// no validation rules for Expiration

	for idx, item := range m.GetHttpHeaders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HandlerValidationError{
					field:  fmt.Sprintf("HttpHeaders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MimeType

	// no validation rules for RedirectHttpResponseCode

	// no validation rules for Secure

	// no validation rules for StaticDir

	// no validation rules for StaticFiles

	// no validation rules for Upload

	return nil
}

// HandlerValidationError is the validation error returned by Handler.Validate
// if the designated constraints aren't met.
type HandlerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandlerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandlerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandlerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandlerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandlerValidationError) ErrorName() string { return "HandlerValidationError" }

// Error satisfies the builtin error interface
func (e HandlerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandler.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandlerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandlerValidationError{}

// Validate checks the field values on DispatchConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DispatchConfig) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDispatch() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DispatchConfigValidationError{
					field:  fmt.Sprintf("Dispatch[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DispatchConfigValidationError is the validation error returned by
// DispatchConfig.Validate if the designated constraints aren't met.
type DispatchConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DispatchConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DispatchConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DispatchConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DispatchConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DispatchConfigValidationError) ErrorName() string { return "DispatchConfigValidationError" }

// Error satisfies the builtin error interface
func (e DispatchConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDispatchConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DispatchConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DispatchConfigValidationError{}

// Validate checks the field values on Dispatch with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Dispatch) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	// no validation rules for Module

	return nil
}

// DispatchValidationError is the validation error returned by
// Dispatch.Validate if the designated constraints aren't met.
type DispatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DispatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DispatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DispatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DispatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DispatchValidationError) ErrorName() string { return "DispatchValidationError" }

// Error satisfies the builtin error interface
func (e DispatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDispatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DispatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DispatchValidationError{}

// Validate checks the field values on EnvVariable with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnvVariable) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EnvName

	// no validation rules for EnvValue

	return nil
}

// EnvVariableValidationError is the validation error returned by
// EnvVariable.Validate if the designated constraints aren't met.
type EnvVariableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvVariableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvVariableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvVariableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvVariableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvVariableValidationError) ErrorName() string { return "EnvVariableValidationError" }

// Error satisfies the builtin error interface
func (e EnvVariableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvVariable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvVariableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvVariableValidationError{}

// Validate checks the field values on HttpHeader with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *HttpHeader) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Header

	// no validation rules for Value

	return nil
}

// HttpHeaderValidationError is the validation error returned by
// HttpHeader.Validate if the designated constraints aren't met.
type HttpHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpHeaderValidationError) ErrorName() string { return "HttpHeaderValidationError" }

// Error satisfies the builtin error interface
func (e HttpHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpHeaderValidationError{}

// Validate checks the field values on AutomaticScaling with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AutomaticScaling) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxNumInstances

	// no validation rules for MinNumInstances

	// no validation rules for MaxIdleInstances

	// no validation rules for MinIdleInstances

	// no validation rules for TargetCpuUtilization

	// no validation rules for TargetThroughputUtilization

	// no validation rules for MaxConcurrentRequests

	return nil
}

// AutomaticScalingValidationError is the validation error returned by
// AutomaticScaling.Validate if the designated constraints aren't met.
type AutomaticScalingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutomaticScalingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutomaticScalingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutomaticScalingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutomaticScalingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutomaticScalingValidationError) ErrorName() string { return "AutomaticScalingValidationError" }

// Error satisfies the builtin error interface
func (e AutomaticScalingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutomaticScaling.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutomaticScalingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutomaticScalingValidationError{}

// Validate checks the field values on BasicScaling with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BasicScaling) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxInstances

	// no validation rules for IdleTimeout

	return nil
}

// BasicScalingValidationError is the validation error returned by
// BasicScaling.Validate if the designated constraints aren't met.
type BasicScalingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasicScalingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasicScalingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasicScalingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasicScalingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasicScalingValidationError) ErrorName() string { return "BasicScalingValidationError" }

// Error satisfies the builtin error interface
func (e BasicScalingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasicScaling.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasicScalingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasicScalingValidationError{}

// Validate checks the field values on ManualScaling with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ManualScaling) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Instances

	return nil
}

// ManualScalingValidationError is the validation error returned by
// ManualScaling.Validate if the designated constraints aren't met.
type ManualScalingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManualScalingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManualScalingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManualScalingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManualScalingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManualScalingValidationError) ErrorName() string { return "ManualScalingValidationError" }

// Error satisfies the builtin error interface
func (e ManualScalingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManualScaling.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManualScalingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManualScalingValidationError{}

// Validate checks the field values on ForwardedPort with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ForwardedPort) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetHostPort(); val < 1024 || val >= 65535 {
		return ForwardedPortValidationError{
			field:  "HostPort",
			reason: "value must be inside range [1024, 65535)",
		}
	}

	if _, ok := _ForwardedPort_HostPort_NotInLookup[m.GetHostPort()]; ok {
		return ForwardedPortValidationError{
			field:  "HostPort",
			reason: "value must not be in list [8080 8090 8443 10000 10001 11211 24231]",
		}
	}

	if val := m.GetContainerPort(); val < 1 || val >= 65535 {
		return ForwardedPortValidationError{
			field:  "ContainerPort",
			reason: "value must be inside range [1, 65535)",
		}
	}

	if _, ok := _ForwardedPort_ContainerPort_NotInLookup[m.GetContainerPort()]; ok {
		return ForwardedPortValidationError{
			field:  "ContainerPort",
			reason: "value must not be in list [22 10001 11211]",
		}
	}

	return nil
}

// ForwardedPortValidationError is the validation error returned by
// ForwardedPort.Validate if the designated constraints aren't met.
type ForwardedPortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardedPortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardedPortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardedPortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardedPortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardedPortValidationError) ErrorName() string { return "ForwardedPortValidationError" }

// Error satisfies the builtin error interface
func (e ForwardedPortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardedPort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardedPortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardedPortValidationError{}

var _ForwardedPort_HostPort_NotInLookup = map[int32]struct{}{
	8080:  {},
	8090:  {},
	8443:  {},
	10000: {},
	10001: {},
	11211: {},
	24231: {},
}

var _ForwardedPort_ContainerPort_NotInLookup = map[int32]struct{}{
	22:    {},
	10001: {},
	11211: {},
}

// Validate checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Volume) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for VolumeType

	if m.GetSizeGb() < 0.001 {
		return VolumeValidationError{
			field:  "SizeGb",
			reason: "value must be greater than or equal to 0.001",
		}
	}

	return nil
}

// VolumeValidationError is the validation error returned by Volume.Validate if
// the designated constraints aren't met.
type VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeValidationError) ErrorName() string { return "VolumeValidationError" }

// Error satisfies the builtin error interface
func (e VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeValidationError{}

// Validate checks the field values on LivenessChecks with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LivenessChecks) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Path

	if val := m.GetCheckIntervalSec(); val < 1 || val > 300 {
		return LivenessChecksValidationError{
			field:  "CheckIntervalSec",
			reason: "value must be inside range [1, 300]",
		}
	}

	if val := m.GetTimeoutSec(); val < 1 || val > 300 {
		return LivenessChecksValidationError{
			field:  "TimeoutSec",
			reason: "value must be inside range [1, 300]",
		}
	}

	if val := m.GetFailureThreshold(); val < 1 || val > 10 {
		return LivenessChecksValidationError{
			field:  "FailureThreshold",
			reason: "value must be inside range [1, 10]",
		}
	}

	if val := m.GetSuccessThreshold(); val < 1 || val > 10 {
		return LivenessChecksValidationError{
			field:  "SuccessThreshold",
			reason: "value must be inside range [1, 10]",
		}
	}

	if val := m.GetInitialDelaySec(); val < 0 || val > 3600 {
		return LivenessChecksValidationError{
			field:  "InitialDelaySec",
			reason: "value must be inside range [0, 3600]",
		}
	}

	return nil
}

// LivenessChecksValidationError is the validation error returned by
// LivenessChecks.Validate if the designated constraints aren't met.
type LivenessChecksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LivenessChecksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LivenessChecksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LivenessChecksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LivenessChecksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LivenessChecksValidationError) ErrorName() string { return "LivenessChecksValidationError" }

// Error satisfies the builtin error interface
func (e LivenessChecksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLivenessChecks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LivenessChecksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LivenessChecksValidationError{}

// Validate checks the field values on ReadynessChecks with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadynessChecks) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Path

	if val := m.GetCheckIntervalSec(); val < 1 || val > 300 {
		return ReadynessChecksValidationError{
			field:  "CheckIntervalSec",
			reason: "value must be inside range [1, 300]",
		}
	}

	if val := m.GetTimeoutSec(); val < 1 || val > 300 {
		return ReadynessChecksValidationError{
			field:  "TimeoutSec",
			reason: "value must be inside range [1, 300]",
		}
	}

	if val := m.GetFailureThreshold(); val < 1 || val > 10 {
		return ReadynessChecksValidationError{
			field:  "FailureThreshold",
			reason: "value must be inside range [1, 10]",
		}
	}

	if val := m.GetSuccessThreshold(); val < 1 || val > 10 {
		return ReadynessChecksValidationError{
			field:  "SuccessThreshold",
			reason: "value must be inside range [1, 10]",
		}
	}

	if val := m.GetAppStartTimeoutSec(); val < 0 || val > 1800 {
		return ReadynessChecksValidationError{
			field:  "AppStartTimeoutSec",
			reason: "value must be inside range [0, 1800]",
		}
	}

	return nil
}

// ReadynessChecksValidationError is the validation error returned by
// ReadynessChecks.Validate if the designated constraints aren't met.
type ReadynessChecksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadynessChecksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadynessChecksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadynessChecksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadynessChecksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadynessChecksValidationError) ErrorName() string { return "ReadynessChecksValidationError" }

// Error satisfies the builtin error interface
func (e ReadynessChecksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadynessChecks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadynessChecksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadynessChecksValidationError{}

// Validate checks the field values on Entrypoint with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Entrypoint) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CommandName

	// no validation rules for Port

	return nil
}

// EntrypointValidationError is the validation error returned by
// Entrypoint.Validate if the designated constraints aren't met.
type EntrypointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntrypointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntrypointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntrypointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntrypointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntrypointValidationError) ErrorName() string { return "EntrypointValidationError" }

// Error satisfies the builtin error interface
func (e EntrypointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntrypoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntrypointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntrypointValidationError{}

// Validate checks the field values on Framework with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Framework) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Version

	return nil
}

// FrameworkValidationError is the validation error returned by
// Framework.Validate if the designated constraints aren't met.
type FrameworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FrameworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FrameworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FrameworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FrameworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FrameworkValidationError) ErrorName() string { return "FrameworkValidationError" }

// Error satisfies the builtin error interface
func (e FrameworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFramework.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FrameworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FrameworkValidationError{}

// Validate checks the field values on ORM with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *ORM) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Version

	return nil
}

// ORMValidationError is the validation error returned by ORM.Validate if the
// designated constraints aren't met.
type ORMValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORMValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORMValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORMValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORMValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORMValidationError) ErrorName() string { return "ORMValidationError" }

// Error satisfies the builtin error interface
func (e ORMValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORM.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORMValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORMValidationError{}

// Validate checks the field values on Library with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Library) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Version

	return nil
}

// LibraryValidationError is the validation error returned by Library.Validate
// if the designated constraints aren't met.
type LibraryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LibraryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LibraryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LibraryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LibraryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LibraryValidationError) ErrorName() string { return "LibraryValidationError" }

// Error satisfies the builtin error interface
func (e LibraryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLibrary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LibraryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LibraryValidationError{}

// Validate checks the field values on Database with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Database) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Port

	return nil
}

// DatabaseValidationError is the validation error returned by
// Database.Validate if the designated constraints aren't met.
type DatabaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatabaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatabaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatabaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatabaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatabaseValidationError) ErrorName() string { return "DatabaseValidationError" }

// Error satisfies the builtin error interface
func (e DatabaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatabase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatabaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatabaseValidationError{}

// Validate checks the field values on Git with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Git) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GitUrl

	// no validation rules for GitBranch

	// no validation rules for GitCommit

	return nil
}

// GitValidationError is the validation error returned by Git.Validate if the
// designated constraints aren't met.
type GitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitValidationError) ErrorName() string { return "GitValidationError" }

// Error satisfies the builtin error interface
func (e GitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitValidationError{}
