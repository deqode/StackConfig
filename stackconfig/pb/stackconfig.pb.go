// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.5
// source: stackconfig.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AutoIdPolicy int32

const (
	AutoIdPolicy_default AutoIdPolicy = 0
	AutoIdPolicy_legacy  AutoIdPolicy = 1
)

// Enum value maps for AutoIdPolicy.
var (
	AutoIdPolicy_name = map[int32]string{
		0: "default",
		1: "legacy",
	}
	AutoIdPolicy_value = map[string]int32{
		"default": 0,
		"legacy":  1,
	}
)

func (x AutoIdPolicy) Enum() *AutoIdPolicy {
	p := new(AutoIdPolicy)
	*p = x
	return p
}

func (x AutoIdPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutoIdPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_stackconfig_proto_enumTypes[0].Descriptor()
}

func (AutoIdPolicy) Type() protoreflect.EnumType {
	return &file_stackconfig_proto_enumTypes[0]
}

func (x AutoIdPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutoIdPolicy.Descriptor instead.
func (AutoIdPolicy) EnumDescriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{0}
}

type Runtime int32

const (
	Runtime_python27 Runtime = 0
	Runtime_ruby25   Runtime = 1
	Runtime_ruby26   Runtime = 2
	Runtime_ruby27   Runtime = 3
	Runtime_nodejs14 Runtime = 4
	Runtime_nodejs12 Runtime = 5
	Runtime_nodejs10 Runtime = 6
)

// Enum value maps for Runtime.
var (
	Runtime_name = map[int32]string{
		0: "python27",
		1: "ruby25",
		2: "ruby26",
		3: "ruby27",
		4: "nodejs14",
		5: "nodejs12",
		6: "nodejs10",
	}
	Runtime_value = map[string]int32{
		"python27": 0,
		"ruby25":   1,
		"ruby26":   2,
		"ruby27":   3,
		"nodejs14": 4,
		"nodejs12": 5,
		"nodejs10": 6,
	}
)

func (x Runtime) Enum() *Runtime {
	p := new(Runtime)
	*p = x
	return p
}

func (x Runtime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Runtime) Descriptor() protoreflect.EnumDescriptor {
	return file_stackconfig_proto_enumTypes[1].Descriptor()
}

func (Runtime) Type() protoreflect.EnumType {
	return &file_stackconfig_proto_enumTypes[1]
}

func (x Runtime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Runtime.Descriptor instead.
func (Runtime) EnumDescriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{1}
}

type BuiltinKeys int32

const (
	BuiltinKeys_appstats  BuiltinKeys = 0
	BuiltinKeys_deferred  BuiltinKeys = 1
	BuiltinKeys_rempteApi BuiltinKeys = 2
)

// Enum value maps for BuiltinKeys.
var (
	BuiltinKeys_name = map[int32]string{
		0: "appstats",
		1: "deferred",
		2: "rempteApi",
	}
	BuiltinKeys_value = map[string]int32{
		"appstats":  0,
		"deferred":  1,
		"rempteApi": 2,
	}
)

func (x BuiltinKeys) Enum() *BuiltinKeys {
	p := new(BuiltinKeys)
	*p = x
	return p
}

func (x BuiltinKeys) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuiltinKeys) Descriptor() protoreflect.EnumDescriptor {
	return file_stackconfig_proto_enumTypes[2].Descriptor()
}

func (BuiltinKeys) Type() protoreflect.EnumType {
	return &file_stackconfig_proto_enumTypes[2]
}

func (x BuiltinKeys) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuiltinKeys.Descriptor instead.
func (BuiltinKeys) EnumDescriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{2}
}

type BuiltinValues int32

const (
	BuiltinValues_on  BuiltinValues = 0
	BuiltinValues_off BuiltinValues = 1
)

// Enum value maps for BuiltinValues.
var (
	BuiltinValues_name = map[int32]string{
		0: "on",
		1: "off",
	}
	BuiltinValues_value = map[string]int32{
		"on":  0,
		"off": 1,
	}
)

func (x BuiltinValues) Enum() *BuiltinValues {
	p := new(BuiltinValues)
	*p = x
	return p
}

func (x BuiltinValues) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuiltinValues) Descriptor() protoreflect.EnumDescriptor {
	return file_stackconfig_proto_enumTypes[3].Descriptor()
}

func (BuiltinValues) Type() protoreflect.EnumType {
	return &file_stackconfig_proto_enumTypes[3]
}

func (x BuiltinValues) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuiltinValues.Descriptor instead.
func (BuiltinValues) EnumDescriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{3}
}

type ErrorCodes int32

const (
	ErrorCodes_overQuota    ErrorCodes = 0
	ErrorCodes_dosApiDenial ErrorCodes = 1
	ErrorCodes_timeout      ErrorCodes = 2
)

// Enum value maps for ErrorCodes.
var (
	ErrorCodes_name = map[int32]string{
		0: "overQuota",
		1: "dosApiDenial",
		2: "timeout",
	}
	ErrorCodes_value = map[string]int32{
		"overQuota":    0,
		"dosApiDenial": 1,
		"timeout":      2,
	}
)

func (x ErrorCodes) Enum() *ErrorCodes {
	p := new(ErrorCodes)
	*p = x
	return p
}

func (x ErrorCodes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCodes) Descriptor() protoreflect.EnumDescriptor {
	return file_stackconfig_proto_enumTypes[4].Descriptor()
}

func (ErrorCodes) Type() protoreflect.EnumType {
	return &file_stackconfig_proto_enumTypes[4]
}

func (x ErrorCodes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCodes.Descriptor instead.
func (ErrorCodes) EnumDescriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{4}
}

type Login int32

const (
	Login_optional Login = 0
	Login_required Login = 1
	Login_admin    Login = 2
)

// Enum value maps for Login.
var (
	Login_name = map[int32]string{
		0: "optional",
		1: "required",
		2: "admin",
	}
	Login_value = map[string]int32{
		"optional": 0,
		"required": 1,
		"admin":    2,
	}
)

func (x Login) Enum() *Login {
	p := new(Login)
	*p = x
	return p
}

func (x Login) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Login) Descriptor() protoreflect.EnumDescriptor {
	return file_stackconfig_proto_enumTypes[5].Descriptor()
}

func (Login) Type() protoreflect.EnumType {
	return &file_stackconfig_proto_enumTypes[5]
}

func (x Login) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Login.Descriptor instead.
func (Login) EnumDescriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{5}
}

type AuthFailAction int32

const (
	AuthFailAction_redirect     AuthFailAction = 0
	AuthFailAction_unauthorized AuthFailAction = 1
)

// Enum value maps for AuthFailAction.
var (
	AuthFailAction_name = map[int32]string{
		0: "redirect",
		1: "unauthorized",
	}
	AuthFailAction_value = map[string]int32{
		"redirect":     0,
		"unauthorized": 1,
	}
)

func (x AuthFailAction) Enum() *AuthFailAction {
	p := new(AuthFailAction)
	*p = x
	return p
}

func (x AuthFailAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthFailAction) Descriptor() protoreflect.EnumDescriptor {
	return file_stackconfig_proto_enumTypes[6].Descriptor()
}

func (AuthFailAction) Type() protoreflect.EnumType {
	return &file_stackconfig_proto_enumTypes[6]
}

func (x AuthFailAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthFailAction.Descriptor instead.
func (AuthFailAction) EnumDescriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{6}
}

type Secure int32

const (
	Secure_optional_ Secure = 0
	Secure_never     Secure = 1
	Secure_always    Secure = 2
)

// Enum value maps for Secure.
var (
	Secure_name = map[int32]string{
		0: "optional_",
		1: "never",
		2: "always",
	}
	Secure_value = map[string]int32{
		"optional_": 0,
		"never":     1,
		"always":    2,
	}
)

func (x Secure) Enum() *Secure {
	p := new(Secure)
	*p = x
	return p
}

func (x Secure) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Secure) Descriptor() protoreflect.EnumDescriptor {
	return file_stackconfig_proto_enumTypes[7].Descriptor()
}

func (Secure) Type() protoreflect.EnumType {
	return &file_stackconfig_proto_enumTypes[7]
}

func (x Secure) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Secure.Descriptor instead.
func (Secure) EnumDescriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{7}
}

type InboundService int32

const (
	InboundService_warmup InboundService = 0
)

// Enum value maps for InboundService.
var (
	InboundService_name = map[int32]string{
		0: "warmup",
	}
	InboundService_value = map[string]int32{
		"warmup": 0,
	}
)

func (x InboundService) Enum() *InboundService {
	p := new(InboundService)
	*p = x
	return p
}

func (x InboundService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InboundService) Descriptor() protoreflect.EnumDescriptor {
	return file_stackconfig_proto_enumTypes[8].Descriptor()
}

func (InboundService) Type() protoreflect.EnumType {
	return &file_stackconfig_proto_enumTypes[8]
}

func (x InboundService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InboundService.Descriptor instead.
func (InboundService) EnumDescriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{8}
}

type InstanceClass int32

const (
	InstanceClass_F InstanceClass = 0
	InstanceClass_B InstanceClass = 1
)

// Enum value maps for InstanceClass.
var (
	InstanceClass_name = map[int32]string{
		0: "F",
		1: "B",
	}
	InstanceClass_value = map[string]int32{
		"F": 0,
		"B": 1,
	}
)

func (x InstanceClass) Enum() *InstanceClass {
	p := new(InstanceClass)
	*p = x
	return p
}

func (x InstanceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_stackconfig_proto_enumTypes[9].Descriptor()
}

func (InstanceClass) Type() protoreflect.EnumType {
	return &file_stackconfig_proto_enumTypes[9]
}

func (x InstanceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceClass.Descriptor instead.
func (InstanceClass) EnumDescriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{9}
}

type StackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        int32            `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	AppId          string           `protobuf:"bytes,2,opt,name=appId,proto3" json:"appId,omitempty"`
	AppName        string           `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	Services       []*ServiceConfig `protobuf:"bytes,4,rep,name=services,proto3" json:"services,omitempty"`
	DispatchConfig *DispatchConfig  `protobuf:"bytes,5,opt,name=dispatchConfig,proto3" json:"dispatchConfig,omitempty"`
}

func (x *StackConfig) Reset() {
	*x = StackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackConfig) ProtoMessage() {}

func (x *StackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackConfig.ProtoReflect.Descriptor instead.
func (*StackConfig) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{0}
}

func (x *StackConfig) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StackConfig) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *StackConfig) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *StackConfig) GetServices() []*ServiceConfig {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *StackConfig) GetDispatchConfig() *DispatchConfig {
	if x != nil {
		return x.DispatchConfig
	}
	return nil
}

type ServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service version
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// service id
	ServiceId string `protobuf:"bytes,2,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	// run time environment used by service
	Runtime Runtime `protobuf:"varint,3,opt,name=runtime,proto3,enum=Runtime" json:"runtime,omitempty"`
	// runtime configuration
	RuntimeConfig *RuntimeConfig `protobuf:"bytes,4,opt,name=runtimeConfig,proto3" json:"runtimeConfig,omitempty"`
	// automatic scaling settings, this is by default
	AutomaticScaling *AutomaticScaling `protobuf:"bytes,5,opt,name=automaticScaling,proto3" json:"automaticScaling,omitempty"`
	// manual scaling settings
	ManualScaling *ManualScaling `protobuf:"bytes,6,opt,name=manualScaling,proto3" json:"manualScaling,omitempty"`
	// network settings
	Network *Network `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	// resource settings
	Resources *Resource `protobuf:"bytes,8,opt,name=resources,proto3" json:"resources,omitempty"`
	// custom liveness checks, confirm that VM and Docker container are running
	LivenessChecks *LivenessChecks `protobuf:"bytes,9,opt,name=livenessChecks,proto3" json:"livenessChecks,omitempty"`
	// custom readiness checks, confirm that your instance is ready to accept incoming requests
	ReadynessChecks *ReadynessChecks `protobuf:"bytes,10,opt,name=readynessChecks,proto3" json:"readynessChecks,omitempty"`
	// global default cache period for all static file handlers for an application
	DefaultExpiration string `protobuf:"bytes,11,opt,name=defaultExpiration,proto3" json:"defaultExpiration,omitempty"`
	// list of environment variables available to your app
	EnvVariables []*EnvVariable `protobuf:"bytes,12,rep,name=envVariables,proto3" json:"envVariables,omitempty"`
	// custom error pages that are returned for different error types
	ErrorHandlers []*ErrorHandler `protobuf:"bytes,13,rep,name=errorHandlers,proto3" json:"errorHandlers,omitempty"`
	// list of URL patterns and descriptions of how they should be handled
	Handlers []*Handler `protobuf:"bytes,14,rep,name=handlers,proto3" json:"handlers,omitempty"`
	// configure warmup requests to improve performance
	InboundService InboundService `protobuf:"varint,15,opt,name=inboundService,proto3,enum=InboundService" json:"inboundService,omitempty"`
	// files in the application directory that are not to be uploaded
	SkipFiles []string    `protobuf:"bytes,16,rep,name=skipFiles,proto3" json:"skipFiles,omitempty"`
	Git       *Git        `protobuf:"bytes,17,opt,name=git,proto3" json:"git,omitempty"`
	Databases []*Database `protobuf:"bytes,18,rep,name=databases,proto3" json:"databases,omitempty"`
	// services on which this service depends
	Dependson []string `protobuf:"bytes,19,rep,name=dependson,proto3" json:"dependson,omitempty"`
}

func (x *ServiceConfig) Reset() {
	*x = ServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig) ProtoMessage() {}

func (x *ServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig.ProtoReflect.Descriptor instead.
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceConfig) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ServiceConfig) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceConfig) GetRuntime() Runtime {
	if x != nil {
		return x.Runtime
	}
	return Runtime_python27
}

func (x *ServiceConfig) GetRuntimeConfig() *RuntimeConfig {
	if x != nil {
		return x.RuntimeConfig
	}
	return nil
}

func (x *ServiceConfig) GetAutomaticScaling() *AutomaticScaling {
	if x != nil {
		return x.AutomaticScaling
	}
	return nil
}

func (x *ServiceConfig) GetManualScaling() *ManualScaling {
	if x != nil {
		return x.ManualScaling
	}
	return nil
}

func (x *ServiceConfig) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ServiceConfig) GetResources() *Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ServiceConfig) GetLivenessChecks() *LivenessChecks {
	if x != nil {
		return x.LivenessChecks
	}
	return nil
}

func (x *ServiceConfig) GetReadynessChecks() *ReadynessChecks {
	if x != nil {
		return x.ReadynessChecks
	}
	return nil
}

func (x *ServiceConfig) GetDefaultExpiration() string {
	if x != nil {
		return x.DefaultExpiration
	}
	return ""
}

func (x *ServiceConfig) GetEnvVariables() []*EnvVariable {
	if x != nil {
		return x.EnvVariables
	}
	return nil
}

func (x *ServiceConfig) GetErrorHandlers() []*ErrorHandler {
	if x != nil {
		return x.ErrorHandlers
	}
	return nil
}

func (x *ServiceConfig) GetHandlers() []*Handler {
	if x != nil {
		return x.Handlers
	}
	return nil
}

func (x *ServiceConfig) GetInboundService() InboundService {
	if x != nil {
		return x.InboundService
	}
	return InboundService_warmup
}

func (x *ServiceConfig) GetSkipFiles() []string {
	if x != nil {
		return x.SkipFiles
	}
	return nil
}

func (x *ServiceConfig) GetGit() *Git {
	if x != nil {
		return x.Git
	}
	return nil
}

func (x *ServiceConfig) GetDatabases() []*Database {
	if x != nil {
		return x.Databases
	}
	return nil
}

func (x *ServiceConfig) GetDependson() []string {
	if x != nil {
		return x.Dependson
	}
	return nil
}

type RuntimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RuntimeConfigs:
	//	*RuntimeConfig_Python27Config
	//	*RuntimeConfig_RubyConfig
	//	*RuntimeConfig_NodeConfig
	RuntimeConfigs isRuntimeConfig_RuntimeConfigs `protobuf_oneof:"runtimeConfigs"`
}

func (x *RuntimeConfig) Reset() {
	*x = RuntimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeConfig) ProtoMessage() {}

func (x *RuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeConfig.ProtoReflect.Descriptor instead.
func (*RuntimeConfig) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{2}
}

func (m *RuntimeConfig) GetRuntimeConfigs() isRuntimeConfig_RuntimeConfigs {
	if m != nil {
		return m.RuntimeConfigs
	}
	return nil
}

func (x *RuntimeConfig) GetPython27Config() *Python27Config {
	if x, ok := x.GetRuntimeConfigs().(*RuntimeConfig_Python27Config); ok {
		return x.Python27Config
	}
	return nil
}

func (x *RuntimeConfig) GetRubyConfig() *RubyConfig {
	if x, ok := x.GetRuntimeConfigs().(*RuntimeConfig_RubyConfig); ok {
		return x.RubyConfig
	}
	return nil
}

func (x *RuntimeConfig) GetNodeConfig() *NodeConfig {
	if x, ok := x.GetRuntimeConfigs().(*RuntimeConfig_NodeConfig); ok {
		return x.NodeConfig
	}
	return nil
}

type isRuntimeConfig_RuntimeConfigs interface {
	isRuntimeConfig_RuntimeConfigs()
}

type RuntimeConfig_Python27Config struct {
	// Python 2.7 runtime configuration
	Python27Config *Python27Config `protobuf:"bytes,1,opt,name=python27Config,proto3,oneof"`
}

type RuntimeConfig_RubyConfig struct {
	// Ruby runtime config
	RubyConfig *RubyConfig `protobuf:"bytes,2,opt,name=rubyConfig,proto3,oneof"`
}

type RuntimeConfig_NodeConfig struct {
	// Node runtime config
	NodeConfig *NodeConfig `protobuf:"bytes,3,opt,name=nodeConfig,proto3,oneof"`
}

func (*RuntimeConfig_Python27Config) isRuntimeConfig_RuntimeConfigs() {}

func (*RuntimeConfig_RubyConfig) isRuntimeConfig_RuntimeConfigs() {}

func (*RuntimeConfig_NodeConfig) isRuntimeConfig_RuntimeConfigs() {}

type Python27Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// run time environment's api version
	ApiVersion int32 `protobuf:"varint,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// it can be default or legacy
	AutoIdPolicy AutoIdPolicy `protobuf:"varint,2,opt,name=autoIdPolicy,proto3,enum=AutoIdPolicy" json:"autoIdPolicy,omitempty"`
	// list of builtin handlers for common application functions
	Builtins  []*Builtin `protobuf:"bytes,3,rep,name=builtins,proto3" json:"builtins,omitempty"`
	Framework *Framework `protobuf:"bytes,4,opt,name=framework,proto3" json:"framework,omitempty"`
	Orms      []*ORM     `protobuf:"bytes,5,rep,name=orms,proto3" json:"orms,omitempty"`
	Libraries []*Library `protobuf:"bytes,6,rep,name=libraries,proto3" json:"libraries,omitempty"`
}

func (x *Python27Config) Reset() {
	*x = Python27Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Python27Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Python27Config) ProtoMessage() {}

func (x *Python27Config) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Python27Config.ProtoReflect.Descriptor instead.
func (*Python27Config) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{3}
}

func (x *Python27Config) GetApiVersion() int32 {
	if x != nil {
		return x.ApiVersion
	}
	return 0
}

func (x *Python27Config) GetAutoIdPolicy() AutoIdPolicy {
	if x != nil {
		return x.AutoIdPolicy
	}
	return AutoIdPolicy_default
}

func (x *Python27Config) GetBuiltins() []*Builtin {
	if x != nil {
		return x.Builtins
	}
	return nil
}

func (x *Python27Config) GetFramework() *Framework {
	if x != nil {
		return x.Framework
	}
	return nil
}

func (x *Python27Config) GetOrms() []*ORM {
	if x != nil {
		return x.Orms
	}
	return nil
}

func (x *Python27Config) GetLibraries() []*Library {
	if x != nil {
		return x.Libraries
	}
	return nil
}

type RubyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// command to start the ruby service
	Entrypoint *Entrypoint `protobuf:"bytes,1,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	Framework  *Framework  `protobuf:"bytes,2,opt,name=framework,proto3" json:"framework,omitempty"`
	Orms       []*ORM      `protobuf:"bytes,3,rep,name=orms,proto3" json:"orms,omitempty"`
	Libraries  []*Library  `protobuf:"bytes,4,rep,name=libraries,proto3" json:"libraries,omitempty"`
}

func (x *RubyConfig) Reset() {
	*x = RubyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RubyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RubyConfig) ProtoMessage() {}

func (x *RubyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RubyConfig.ProtoReflect.Descriptor instead.
func (*RubyConfig) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{4}
}

func (x *RubyConfig) GetEntrypoint() *Entrypoint {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *RubyConfig) GetFramework() *Framework {
	if x != nil {
		return x.Framework
	}
	return nil
}

func (x *RubyConfig) GetOrms() []*ORM {
	if x != nil {
		return x.Orms
	}
	return nil
}

func (x *RubyConfig) GetLibraries() []*Library {
	if x != nil {
		return x.Libraries
	}
	return nil
}

type NodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// overrides the default startup behavior by executing the entrypoint command when your app starts.
	Entrypoint *Entrypoint `protobuf:"bytes,1,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	Framework  *Framework  `protobuf:"bytes,2,opt,name=framework,proto3" json:"framework,omitempty"`
	Orms       []*ORM      `protobuf:"bytes,3,rep,name=orms,proto3" json:"orms,omitempty"`
	Libraries  []*Library  `protobuf:"bytes,4,rep,name=libraries,proto3" json:"libraries,omitempty"`
}

func (x *NodeConfig) Reset() {
	*x = NodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfig) ProtoMessage() {}

func (x *NodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfig.ProtoReflect.Descriptor instead.
func (*NodeConfig) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{5}
}

func (x *NodeConfig) GetEntrypoint() *Entrypoint {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *NodeConfig) GetFramework() *Framework {
	if x != nil {
		return x.Framework
	}
	return nil
}

func (x *NodeConfig) GetOrms() []*ORM {
	if x != nil {
		return x.Orms
	}
	return nil
}

func (x *NodeConfig) GetLibraries() []*Library {
	if x != nil {
		return x.Libraries
	}
	return nil
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tag assigned to a group of instances, we can target an action to the group of instances
	InstanceTag string `protobuf:"bytes,1,opt,name=instanceTag,proto3" json:"instanceTag,omitempty"`
	// use this setting to specify a network name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// segment your network and use a custom subnetwork
	SubnetworkName string `protobuf:"bytes,3,opt,name=subnetworkName,proto3" json:"subnetworkName,omitempty"`
	// set to true to configure Stack Engine to route multiple sequential requests for a given user to the same Stack Engine instance
	SessionAffinity bool `protobuf:"varint,4,opt,name=sessionAffinity,proto3" json:"sessionAffinity,omitempty"`
	// forward ports from instance to the container
	ForwardedPorts []*ForwardedPort `protobuf:"bytes,5,rep,name=forwardedPorts,proto3" json:"forwardedPorts,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{6}
}

func (x *Network) GetInstanceTag() string {
	if x != nil {
		return x.InstanceTag
	}
	return ""
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetSubnetworkName() string {
	if x != nil {
		return x.SubnetworkName
	}
	return ""
}

func (x *Network) GetSessionAffinity() bool {
	if x != nil {
		return x.SessionAffinity
	}
	return false
}

func (x *Network) GetForwardedPorts() []*ForwardedPort {
	if x != nil {
		return x.ForwardedPorts
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of cores
	Cpu int32 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// ram in GB
	MemoryGb float32 `protobuf:"fixed32,2,opt,name=memoryGb,proto3" json:"memoryGb,omitempty"`
	// disk size in GB
	DiskSizeGb float32   `protobuf:"fixed32,3,opt,name=diskSizeGb,proto3" json:"diskSizeGb,omitempty"`
	Volumes    []*Volume `protobuf:"bytes,4,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{7}
}

func (x *Resource) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Resource) GetMemoryGb() float32 {
	if x != nil {
		return x.MemoryGb
	}
	return 0
}

func (x *Resource) GetDiskSizeGb() float32 {
	if x != nil {
		return x.DiskSizeGb
	}
	return 0
}

func (x *Resource) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type Builtin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuiltinKeys   BuiltinKeys   `protobuf:"varint,1,opt,name=builtinKeys,proto3,enum=BuiltinKeys" json:"builtinKeys,omitempty"`
	BuiltinValues BuiltinValues `protobuf:"varint,2,opt,name=builtinValues,proto3,enum=BuiltinValues" json:"builtinValues,omitempty"`
}

func (x *Builtin) Reset() {
	*x = Builtin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Builtin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Builtin) ProtoMessage() {}

func (x *Builtin) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Builtin.ProtoReflect.Descriptor instead.
func (*Builtin) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{8}
}

func (x *Builtin) GetBuiltinKeys() BuiltinKeys {
	if x != nil {
		return x.BuiltinKeys
	}
	return BuiltinKeys_appstats
}

func (x *Builtin) GetBuiltinValues() BuiltinValues {
	if x != nil {
		return x.BuiltinValues
	}
	return BuiltinValues_on
}

type ErrorHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ErrorCodes `protobuf:"varint,1,opt,name=errorCode,proto3,enum=ErrorCodes" json:"errorCode,omitempty"`
	File      string     `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *ErrorHandler) Reset() {
	*x = ErrorHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorHandler) ProtoMessage() {}

func (x *ErrorHandler) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorHandler.ProtoReflect.Descriptor instead.
func (*ErrorHandler) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{9}
}

func (x *ErrorHandler) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_overQuota
}

func (x *ErrorHandler) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type Handler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Script string `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	Login  Login  `protobuf:"varint,3,opt,name=login,proto3,enum=Login" json:"login,omitempty"`
	// upload static files to code so that service can read them
	ApplicationReadable bool `protobuf:"varint,4,opt,name=applicationReadable,proto3" json:"applicationReadable,omitempty"`
	// action when user is not logged in
	AuthFailAction AuthFailAction `protobuf:"varint,5,opt,name=authFailAction,proto3,enum=AuthFailAction" json:"authFailAction,omitempty"`
	// length of time a static file served by this handler should be cached by web proxies and browsers
	Expiration string `protobuf:"bytes,6,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// set http headers for responses of your static file or directory handlers
	HttpHeaders []*HttpHeader `protobuf:"bytes,7,rep,name=httpHeaders,proto3" json:"httpHeaders,omitempty"`
	// if specified, all files served by this handler will be served using the specified mime type
	MimeType string `protobuf:"bytes,8,opt,name=mimeType,proto3" json:"mimeType,omitempty"`
	// set the http response code returned when performing a redirect
	RedirectHttpResponseCode int32 `protobuf:"varint,9,opt,name=redirectHttpResponseCode,proto3" json:"redirectHttpResponseCode,omitempty"`
	// any url handler can use the secure setting, including static file handlers(optional, never, always)
	Secure Secure `protobuf:"varint,10,opt,name=secure,proto3,enum=Secure" json:"secure,omitempty"`
	// the path to the directory containing the static files, from the application root directory
	StaticDir   string `protobuf:"bytes,11,opt,name=staticDir,proto3" json:"staticDir,omitempty"`
	StaticFiles string `protobuf:"bytes,12,opt,name=staticFiles,proto3" json:"staticFiles,omitempty"`
	Upload      string `protobuf:"bytes,13,opt,name=upload,proto3" json:"upload,omitempty"`
}

func (x *Handler) Reset() {
	*x = Handler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Handler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handler) ProtoMessage() {}

func (x *Handler) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handler.ProtoReflect.Descriptor instead.
func (*Handler) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{10}
}

func (x *Handler) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Handler) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *Handler) GetLogin() Login {
	if x != nil {
		return x.Login
	}
	return Login_optional
}

func (x *Handler) GetApplicationReadable() bool {
	if x != nil {
		return x.ApplicationReadable
	}
	return false
}

func (x *Handler) GetAuthFailAction() AuthFailAction {
	if x != nil {
		return x.AuthFailAction
	}
	return AuthFailAction_redirect
}

func (x *Handler) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

func (x *Handler) GetHttpHeaders() []*HttpHeader {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

func (x *Handler) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Handler) GetRedirectHttpResponseCode() int32 {
	if x != nil {
		return x.RedirectHttpResponseCode
	}
	return 0
}

func (x *Handler) GetSecure() Secure {
	if x != nil {
		return x.Secure
	}
	return Secure_optional_
}

func (x *Handler) GetStaticDir() string {
	if x != nil {
		return x.StaticDir
	}
	return ""
}

func (x *Handler) GetStaticFiles() string {
	if x != nil {
		return x.StaticFiles
	}
	return ""
}

func (x *Handler) GetUpload() string {
	if x != nil {
		return x.Upload
	}
	return ""
}

type DispatchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dispatch []*Dispatch `protobuf:"bytes,1,rep,name=dispatch,proto3" json:"dispatch,omitempty"`
}

func (x *DispatchConfig) Reset() {
	*x = DispatchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchConfig) ProtoMessage() {}

func (x *DispatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchConfig.ProtoReflect.Descriptor instead.
func (*DispatchConfig) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{11}
}

func (x *DispatchConfig) GetDispatch() []*Dispatch {
	if x != nil {
		return x.Dispatch
	}
	return nil
}

type Dispatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Module string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *Dispatch) Reset() {
	*x = Dispatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dispatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dispatch) ProtoMessage() {}

func (x *Dispatch) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dispatch.ProtoReflect.Descriptor instead.
func (*Dispatch) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{12}
}

func (x *Dispatch) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Dispatch) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type EnvVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvName  string `protobuf:"bytes,1,opt,name=envName,proto3" json:"envName,omitempty"`
	EnvValue string `protobuf:"bytes,2,opt,name=envValue,proto3" json:"envValue,omitempty"`
}

func (x *EnvVariable) Reset() {
	*x = EnvVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVariable) ProtoMessage() {}

func (x *EnvVariable) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVariable.ProtoReflect.Descriptor instead.
func (*EnvVariable) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{13}
}

func (x *EnvVariable) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *EnvVariable) GetEnvValue() string {
	if x != nil {
		return x.EnvValue
	}
	return ""
}

type HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header string `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HttpHeader) Reset() {
	*x = HttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader) ProtoMessage() {}

func (x *HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpHeader) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{14}
}

func (x *HttpHeader) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *HttpHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AutomaticScaling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// maximum number of instances that your service can scale up to
	MaxNumInstances int32 `protobuf:"varint,1,opt,name=maxNumInstances,proto3" json:"maxNumInstances,omitempty"`
	// minimum number of instances given to your service
	MinNumInstances             int32   `protobuf:"varint,2,opt,name=minNumInstances,proto3" json:"minNumInstances,omitempty"`
	MaxIdleInstances            int32   `protobuf:"varint,3,opt,name=maxIdleInstances,proto3" json:"maxIdleInstances,omitempty"`
	MinIdleInstances            int32   `protobuf:"varint,4,opt,name=minIdleInstances,proto3" json:"minIdleInstances,omitempty"`
	TargetCpuUtilization        float32 `protobuf:"fixed32,5,opt,name=targetCpuUtilization,proto3" json:"targetCpuUtilization,omitempty"`
	TargetThroughputUtilization float32 `protobuf:"fixed32,6,opt,name=targetThroughputUtilization,proto3" json:"targetThroughputUtilization,omitempty"`
	MaxConcurrentRequests       int32   `protobuf:"varint,7,opt,name=maxConcurrentRequests,proto3" json:"maxConcurrentRequests,omitempty"`
}

func (x *AutomaticScaling) Reset() {
	*x = AutomaticScaling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomaticScaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomaticScaling) ProtoMessage() {}

func (x *AutomaticScaling) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomaticScaling.ProtoReflect.Descriptor instead.
func (*AutomaticScaling) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{15}
}

func (x *AutomaticScaling) GetMaxNumInstances() int32 {
	if x != nil {
		return x.MaxNumInstances
	}
	return 0
}

func (x *AutomaticScaling) GetMinNumInstances() int32 {
	if x != nil {
		return x.MinNumInstances
	}
	return 0
}

func (x *AutomaticScaling) GetMaxIdleInstances() int32 {
	if x != nil {
		return x.MaxIdleInstances
	}
	return 0
}

func (x *AutomaticScaling) GetMinIdleInstances() int32 {
	if x != nil {
		return x.MinIdleInstances
	}
	return 0
}

func (x *AutomaticScaling) GetTargetCpuUtilization() float32 {
	if x != nil {
		return x.TargetCpuUtilization
	}
	return 0
}

func (x *AutomaticScaling) GetTargetThroughputUtilization() float32 {
	if x != nil {
		return x.TargetThroughputUtilization
	}
	return 0
}

func (x *AutomaticScaling) GetMaxConcurrentRequests() int32 {
	if x != nil {
		return x.MaxConcurrentRequests
	}
	return 0
}

type BasicScaling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxInstances int32  `protobuf:"varint,1,opt,name=maxInstances,proto3" json:"maxInstances,omitempty"`
	IdleTimeout  string `protobuf:"bytes,2,opt,name=idleTimeout,proto3" json:"idleTimeout,omitempty"`
}

func (x *BasicScaling) Reset() {
	*x = BasicScaling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicScaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicScaling) ProtoMessage() {}

func (x *BasicScaling) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicScaling.ProtoReflect.Descriptor instead.
func (*BasicScaling) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{16}
}

func (x *BasicScaling) GetMaxInstances() int32 {
	if x != nil {
		return x.MaxInstances
	}
	return 0
}

func (x *BasicScaling) GetIdleTimeout() string {
	if x != nil {
		return x.IdleTimeout
	}
	return ""
}

type ManualScaling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances int32 `protobuf:"varint,1,opt,name=instances,proto3" json:"instances,omitempty"`
}

func (x *ManualScaling) Reset() {
	*x = ManualScaling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualScaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualScaling) ProtoMessage() {}

func (x *ManualScaling) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualScaling.ProtoReflect.Descriptor instead.
func (*ManualScaling) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{17}
}

func (x *ManualScaling) GetInstances() int32 {
	if x != nil {
		return x.Instances
	}
	return 0
}

type ForwardedPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostPort      int32 `protobuf:"varint,1,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
	ContainerPort int32 `protobuf:"varint,2,opt,name=containerPort,proto3" json:"containerPort,omitempty"`
}

func (x *ForwardedPort) Reset() {
	*x = ForwardedPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardedPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardedPort) ProtoMessage() {}

func (x *ForwardedPort) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardedPort.ProtoReflect.Descriptor instead.
func (*ForwardedPort) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{18}
}

func (x *ForwardedPort) GetHostPort() int32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

func (x *ForwardedPort) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VolumeType string  `protobuf:"bytes,2,opt,name=volumeType,proto3" json:"volumeType,omitempty"`
	SizeGb     float32 `protobuf:"fixed32,3,opt,name=sizeGb,proto3" json:"sizeGb,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{19}
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetVolumeType() string {
	if x != nil {
		return x.VolumeType
	}
	return ""
}

func (x *Volume) GetSizeGb() float32 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

type LivenessChecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// forward liveness checks to application container, specify a url path
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// time interval between checks
	CheckIntervalSec int32 `protobuf:"varint,2,opt,name=checkIntervalSec,proto3" json:"checkIntervalSec,omitempty"`
	// timeout interval for each request
	TimeoutSec int32 `protobuf:"varint,3,opt,name=timeoutSec,proto3" json:"timeoutSec,omitempty"`
	// an instance is unhealthy after failing this number of consecutive checks
	FailureThreshold int32 `protobuf:"varint,4,opt,name=failureThreshold,proto3" json:"failureThreshold,omitempty"`
	// an unhealthy instance becomes healthy again after successfully responding to this number of consecutive checks.
	SuccessThreshold int32 `protobuf:"varint,5,opt,name=successThreshold,proto3" json:"successThreshold,omitempty"`
	// The delay, after the instance starts during which health check responses are ignored
	InitialDelaySec int32 `protobuf:"varint,6,opt,name=initialDelaySec,proto3" json:"initialDelaySec,omitempty"`
}

func (x *LivenessChecks) Reset() {
	*x = LivenessChecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessChecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessChecks) ProtoMessage() {}

func (x *LivenessChecks) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessChecks.ProtoReflect.Descriptor instead.
func (*LivenessChecks) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{20}
}

func (x *LivenessChecks) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LivenessChecks) GetCheckIntervalSec() int32 {
	if x != nil {
		return x.CheckIntervalSec
	}
	return 0
}

func (x *LivenessChecks) GetTimeoutSec() int32 {
	if x != nil {
		return x.TimeoutSec
	}
	return 0
}

func (x *LivenessChecks) GetFailureThreshold() int32 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

func (x *LivenessChecks) GetSuccessThreshold() int32 {
	if x != nil {
		return x.SuccessThreshold
	}
	return 0
}

func (x *LivenessChecks) GetInitialDelaySec() int32 {
	if x != nil {
		return x.InitialDelaySec
	}
	return 0
}

type ReadynessChecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// forward readiness checks to application container, specify a url path
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// time interval between checks
	CheckIntervalSec int32 `protobuf:"varint,2,opt,name=checkIntervalSec,proto3" json:"checkIntervalSec,omitempty"`
	// timeout interval for each request
	TimeoutSec int32 `protobuf:"varint,3,opt,name=timeoutSec,proto3" json:"timeoutSec,omitempty"`
	// an instance is unhealthy after failing this number of consecutive checks
	FailureThreshold int32 `protobuf:"varint,4,opt,name=failureThreshold,proto3" json:"failureThreshold,omitempty"`
	// an unhealthy instance becomes healthy again after successfully responding to this number of consecutive checks
	SuccessThreshold int32 `protobuf:"varint,5,opt,name=successThreshold,proto3" json:"successThreshold,omitempty"`
	// the maximum time in seconds allowed for a sufficient number of instances in a deployment to pass health checks
	AppStartTimeoutSec int32 `protobuf:"varint,6,opt,name=appStartTimeoutSec,proto3" json:"appStartTimeoutSec,omitempty"`
}

func (x *ReadynessChecks) Reset() {
	*x = ReadynessChecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadynessChecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadynessChecks) ProtoMessage() {}

func (x *ReadynessChecks) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadynessChecks.ProtoReflect.Descriptor instead.
func (*ReadynessChecks) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{21}
}

func (x *ReadynessChecks) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadynessChecks) GetCheckIntervalSec() int32 {
	if x != nil {
		return x.CheckIntervalSec
	}
	return 0
}

func (x *ReadynessChecks) GetTimeoutSec() int32 {
	if x != nil {
		return x.TimeoutSec
	}
	return 0
}

func (x *ReadynessChecks) GetFailureThreshold() int32 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

func (x *ReadynessChecks) GetSuccessThreshold() int32 {
	if x != nil {
		return x.SuccessThreshold
	}
	return 0
}

func (x *ReadynessChecks) GetAppStartTimeoutSec() int32 {
	if x != nil {
		return x.AppStartTimeoutSec
	}
	return 0
}

type Entrypoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandName string   `protobuf:"bytes,1,opt,name=commandName,proto3" json:"commandName,omitempty"`
	Args        []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Port        int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Entrypoint) Reset() {
	*x = Entrypoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entrypoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entrypoint) ProtoMessage() {}

func (x *Entrypoint) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entrypoint.ProtoReflect.Descriptor instead.
func (*Entrypoint) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{22}
}

func (x *Entrypoint) GetCommandName() string {
	if x != nil {
		return x.CommandName
	}
	return ""
}

func (x *Entrypoint) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Entrypoint) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Framework struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// framework name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// framework version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Framework) Reset() {
	*x = Framework{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Framework) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framework) ProtoMessage() {}

func (x *Framework) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framework.ProtoReflect.Descriptor instead.
func (*Framework) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{23}
}

func (x *Framework) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Framework) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ORM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// orm name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// orm version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ORM) Reset() {
	*x = ORM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORM) ProtoMessage() {}

func (x *ORM) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORM.ProtoReflect.Descriptor instead.
func (*ORM) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{24}
}

func (x *ORM) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ORM) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Library struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// library name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// library version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Library) Reset() {
	*x = Library{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Library) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Library) ProtoMessage() {}

func (x *Library) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Library.ProtoReflect.Descriptor instead.
func (*Library) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{25}
}

func (x *Library) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Library) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Port    int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{26}
}

func (x *Database) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Database) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Database) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Git struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitUrl    string `protobuf:"bytes,1,opt,name=gitUrl,proto3" json:"gitUrl,omitempty"`
	GitBranch string `protobuf:"bytes,2,opt,name=gitBranch,proto3" json:"gitBranch,omitempty"`
	GitCommit string `protobuf:"bytes,3,opt,name=gitCommit,proto3" json:"gitCommit,omitempty"`
}

func (x *Git) Reset() {
	*x = Git{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stackconfig_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Git) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Git) ProtoMessage() {}

func (x *Git) ProtoReflect() protoreflect.Message {
	mi := &file_stackconfig_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Git.ProtoReflect.Descriptor instead.
func (*Git) Descriptor() ([]byte, []int) {
	return file_stackconfig_proto_rawDescGZIP(), []int{27}
}

func (x *Git) GetGitUrl() string {
	if x != nil {
		return x.GitUrl
	}
	return ""
}

func (x *Git) GetGitBranch() string {
	if x != nil {
		return x.GitBranch
	}
	return ""
}

func (x *Git) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

var File_stackconfig_proto protoreflect.FileDescriptor

var file_stackconfig_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x01, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc9, 0x06, 0x0a, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3d, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x34,
	0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x27, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x73, 0x12, 0x37, 0x0a, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b,
	0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6b, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x03, 0x67, 0x69, 0x74,
	0x12, 0x27, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x73, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x32, 0x37, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x32, 0x37, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x32, 0x37, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x75, 0x62, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x75, 0x62, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x75, 0x62, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x0e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x32,
	0x37, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x49,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x49, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x61, 0x75,
	0x74, 0x6f, 0x49, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x73,
	0x12, 0x28, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x04, 0x6f, 0x72,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x4f, 0x52, 0x4d, 0x52, 0x04,
	0x6f, 0x72, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x52, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a,
	0x0a, 0x52, 0x75, 0x62, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x0a, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x18, 0x0a, 0x04, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x04, 0x2e, 0x4f, 0x52, 0x4d, 0x52, 0x04, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x09,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x04, 0x6f, 0x72,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x4f, 0x52, 0x4d, 0x52, 0x04,
	0x6f, 0x72, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x52, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x12, 0x36, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x10, 0x60, 0x28, 0x01, 0x52, 0x03, 0x63,
	0x70, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x62, 0x12, 0x2f,
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0x20, 0x46, 0x2d, 0x00,
	0x00, 0x20, 0x41, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12,
	0x21, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x22, 0x6f, 0x0a, 0x07, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x2e, 0x0a,
	0x0b, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x34, 0x0a,
	0x0d, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0xdc, 0x03, 0x0a, 0x07, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x46, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x44, 0x69, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x37, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x34, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x22, 0x43, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x76,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x76,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xea, 0x02, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x4e, 0x75,
	0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61,
	0x78, 0x49, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x70, 0x75, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x54,
	0x0a, 0x0c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x2d, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x1a, 0x1d, 0x10, 0xff,
	0xff, 0x03, 0x28, 0x80, 0x08, 0x38, 0x90, 0x3f, 0x38, 0x9a, 0x3f, 0x38, 0xfb, 0x41, 0x38, 0x90,
	0x4e, 0x38, 0x91, 0x4e, 0x38, 0xcb, 0x57, 0x38, 0xa7, 0xbd, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0xfa, 0x42,
	0x10, 0x1a, 0x0e, 0x10, 0xff, 0xff, 0x03, 0x28, 0x01, 0x38, 0x16, 0x38, 0x91, 0x4e, 0x38, 0xcb,
	0x57, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x60, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x0a, 0x05, 0x2d, 0x6f, 0x12, 0x83, 0x3a, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65,
	0x47, 0x62, 0x22, 0xac, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x10, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xac, 0x02, 0x28, 0x01, 0x52,
	0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xac, 0x02, 0x28,
	0x01, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x35, 0x0a,
	0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x0a,
	0x28, 0x01, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x0a, 0x28, 0x01, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x0f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0x90, 0x1c, 0x28, 0x00,
	0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65,
	0x63, 0x22, 0xb3, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x10, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xac, 0x02, 0x28, 0x01, 0x52,
	0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xac, 0x02, 0x28,
	0x01, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x35, 0x0a,
	0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x0a,
	0x28, 0x01, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x0a, 0x28, 0x01, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x12, 0x61,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0x88,
	0x0e, 0x28, 0x00, 0x52, 0x12, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x22, 0x56, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x39, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x03, 0x4f, 0x52,
	0x4d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x37, 0x0a, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x59, 0x0a, 0x03, 0x47, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x69, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x2a, 0x27, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x10, 0x01, 0x2a, 0x65, 0x0a, 0x07, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x32,
	0x37, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x75, 0x62, 0x79, 0x32, 0x35, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x72, 0x75, 0x62, 0x79, 0x32, 0x36, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x72,
	0x75, 0x62, 0x79, 0x32, 0x37, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6a,
	0x73, 0x31, 0x34, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x31,
	0x32, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x31, 0x30, 0x10,
	0x06, 0x2a, 0x38, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x0c, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x73, 0x74, 0x61, 0x74, 0x73, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x41, 0x70, 0x69, 0x10, 0x02, 0x2a, 0x20, 0x0a, 0x0d, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x06, 0x0a, 0x02,
	0x6f, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x6f, 0x66, 0x66, 0x10, 0x01, 0x2a, 0x3a, 0x0a,
	0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x6f,
	0x76, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x64, 0x6f,
	0x73, 0x41, 0x70, 0x69, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x05, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x02, 0x2a, 0x30, 0x0a, 0x0e, 0x41, 0x75, 0x74,
	0x68, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x75, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x2e, 0x0a, 0x06, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x10, 0x02, 0x2a, 0x1c, 0x0a, 0x0e, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x10, 0x00, 0x2a, 0x1d, 0x0a, 0x0d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x05, 0x0a, 0x01, 0x46, 0x10,
	0x00, 0x12, 0x05, 0x0a, 0x01, 0x42, 0x10, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stackconfig_proto_rawDescOnce sync.Once
	file_stackconfig_proto_rawDescData = file_stackconfig_proto_rawDesc
)

func file_stackconfig_proto_rawDescGZIP() []byte {
	file_stackconfig_proto_rawDescOnce.Do(func() {
		file_stackconfig_proto_rawDescData = protoimpl.X.CompressGZIP(file_stackconfig_proto_rawDescData)
	})
	return file_stackconfig_proto_rawDescData
}

var file_stackconfig_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_stackconfig_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_stackconfig_proto_goTypes = []interface{}{
	(AutoIdPolicy)(0),        // 0: AutoIdPolicy
	(Runtime)(0),             // 1: Runtime
	(BuiltinKeys)(0),         // 2: BuiltinKeys
	(BuiltinValues)(0),       // 3: BuiltinValues
	(ErrorCodes)(0),          // 4: ErrorCodes
	(Login)(0),               // 5: Login
	(AuthFailAction)(0),      // 6: AuthFailAction
	(Secure)(0),              // 7: Secure
	(InboundService)(0),      // 8: InboundService
	(InstanceClass)(0),       // 9: InstanceClass
	(*StackConfig)(nil),      // 10: StackConfig
	(*ServiceConfig)(nil),    // 11: ServiceConfig
	(*RuntimeConfig)(nil),    // 12: RuntimeConfig
	(*Python27Config)(nil),   // 13: Python27Config
	(*RubyConfig)(nil),       // 14: RubyConfig
	(*NodeConfig)(nil),       // 15: NodeConfig
	(*Network)(nil),          // 16: Network
	(*Resource)(nil),         // 17: Resource
	(*Builtin)(nil),          // 18: Builtin
	(*ErrorHandler)(nil),     // 19: ErrorHandler
	(*Handler)(nil),          // 20: Handler
	(*DispatchConfig)(nil),   // 21: DispatchConfig
	(*Dispatch)(nil),         // 22: Dispatch
	(*EnvVariable)(nil),      // 23: EnvVariable
	(*HttpHeader)(nil),       // 24: HttpHeader
	(*AutomaticScaling)(nil), // 25: AutomaticScaling
	(*BasicScaling)(nil),     // 26: BasicScaling
	(*ManualScaling)(nil),    // 27: ManualScaling
	(*ForwardedPort)(nil),    // 28: ForwardedPort
	(*Volume)(nil),           // 29: Volume
	(*LivenessChecks)(nil),   // 30: LivenessChecks
	(*ReadynessChecks)(nil),  // 31: ReadynessChecks
	(*Entrypoint)(nil),       // 32: Entrypoint
	(*Framework)(nil),        // 33: Framework
	(*ORM)(nil),              // 34: ORM
	(*Library)(nil),          // 35: Library
	(*Database)(nil),         // 36: Database
	(*Git)(nil),              // 37: Git
}
var file_stackconfig_proto_depIdxs = []int32{
	11, // 0: StackConfig.services:type_name -> ServiceConfig
	21, // 1: StackConfig.dispatchConfig:type_name -> DispatchConfig
	1,  // 2: ServiceConfig.runtime:type_name -> Runtime
	12, // 3: ServiceConfig.runtimeConfig:type_name -> RuntimeConfig
	25, // 4: ServiceConfig.automaticScaling:type_name -> AutomaticScaling
	27, // 5: ServiceConfig.manualScaling:type_name -> ManualScaling
	16, // 6: ServiceConfig.network:type_name -> Network
	17, // 7: ServiceConfig.resources:type_name -> Resource
	30, // 8: ServiceConfig.livenessChecks:type_name -> LivenessChecks
	31, // 9: ServiceConfig.readynessChecks:type_name -> ReadynessChecks
	23, // 10: ServiceConfig.envVariables:type_name -> EnvVariable
	19, // 11: ServiceConfig.errorHandlers:type_name -> ErrorHandler
	20, // 12: ServiceConfig.handlers:type_name -> Handler
	8,  // 13: ServiceConfig.inboundService:type_name -> InboundService
	37, // 14: ServiceConfig.git:type_name -> Git
	36, // 15: ServiceConfig.databases:type_name -> Database
	13, // 16: RuntimeConfig.python27Config:type_name -> Python27Config
	14, // 17: RuntimeConfig.rubyConfig:type_name -> RubyConfig
	15, // 18: RuntimeConfig.nodeConfig:type_name -> NodeConfig
	0,  // 19: Python27Config.autoIdPolicy:type_name -> AutoIdPolicy
	18, // 20: Python27Config.builtins:type_name -> Builtin
	33, // 21: Python27Config.framework:type_name -> Framework
	34, // 22: Python27Config.orms:type_name -> ORM
	35, // 23: Python27Config.libraries:type_name -> Library
	32, // 24: RubyConfig.entrypoint:type_name -> Entrypoint
	33, // 25: RubyConfig.framework:type_name -> Framework
	34, // 26: RubyConfig.orms:type_name -> ORM
	35, // 27: RubyConfig.libraries:type_name -> Library
	32, // 28: NodeConfig.entrypoint:type_name -> Entrypoint
	33, // 29: NodeConfig.framework:type_name -> Framework
	34, // 30: NodeConfig.orms:type_name -> ORM
	35, // 31: NodeConfig.libraries:type_name -> Library
	28, // 32: Network.forwardedPorts:type_name -> ForwardedPort
	29, // 33: Resource.volumes:type_name -> Volume
	2,  // 34: Builtin.builtinKeys:type_name -> BuiltinKeys
	3,  // 35: Builtin.builtinValues:type_name -> BuiltinValues
	4,  // 36: ErrorHandler.errorCode:type_name -> ErrorCodes
	5,  // 37: Handler.login:type_name -> Login
	6,  // 38: Handler.authFailAction:type_name -> AuthFailAction
	24, // 39: Handler.httpHeaders:type_name -> HttpHeader
	7,  // 40: Handler.secure:type_name -> Secure
	22, // 41: DispatchConfig.dispatch:type_name -> Dispatch
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_stackconfig_proto_init() }
func file_stackconfig_proto_init() {
	if File_stackconfig_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stackconfig_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Python27Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RubyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Builtin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Handler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dispatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomaticScaling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicScaling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualScaling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardedPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessChecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadynessChecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entrypoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Framework); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Library); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stackconfig_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Git); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_stackconfig_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RuntimeConfig_Python27Config)(nil),
		(*RuntimeConfig_RubyConfig)(nil),
		(*RuntimeConfig_NodeConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stackconfig_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stackconfig_proto_goTypes,
		DependencyIndexes: file_stackconfig_proto_depIdxs,
		EnumInfos:         file_stackconfig_proto_enumTypes,
		MessageInfos:      file_stackconfig_proto_msgTypes,
	}.Build()
	File_stackconfig_proto = out.File
	file_stackconfig_proto_rawDesc = nil
	file_stackconfig_proto_goTypes = nil
	file_stackconfig_proto_depIdxs = nil
}
