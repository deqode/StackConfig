(self.webpackChunkappconfig=self.webpackChunkappconfig||[]).push([[671],{426:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var i=t(2122),a=t(9756),o=(t(7294),t(3905)),r=["components"],s={},l="What is StackConfig",c={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"What is StackConfig",description:"About",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/StackConfig/docs/intro",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/intro.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar"},p=[{value:"About",id:"about",children:[]},{value:"Where can be used?",id:"where-can-be-used",children:[]},{value:"Usage",id:"usage",children:[{value:"Example with leveldb",id:"example-with-leveldb",children:[]},{value:"Example with postgresql",id:"example-with-postgresql",children:[]},{value:"Example with s3",id:"example-with-s3",children:[]},{value:"App service Interface",id:"app-service-interface",children:[]}]}],g={toc:p};function u(e){var n=e.components,t=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"what-is-stackconfig"},"What is StackConfig"),(0,o.kt)("h2",{id:"about"},"About"),(0,o.kt)("p",null,"We have defined a universal backend application configuration standard. An application might consist of a single or multiple services, an array of such services is stored in the application configuration. Each service contains details such as service runtime, databse, CPU, memory, network, scaling and other general settings including environment variables.\nUsing this Golang library users can Validate, Store, Get and maintain multiple versions of an application configuration in their own databse. User can use this library with any databse supportd by Gokv library. Interface for Stack defines all these implemented methods."),(0,o.kt)("h2",{id:"where-can-be-used"},"Where can be used?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"to generate cloud infrastructure template for an app")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"go get github.com/deqode/StackConfig"),(0,o.kt)("h3",{id:"example-with-leveldb"},"Example with leveldb"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/deqode/StackConfig/stackconfig"\n    "github.com/philippgille/gokv/leveldb"\n    "go.uber.org/zap"\n)\n\nfunction main() {\n    options := leveldb.DefaultOptions\n    store, err := leveldb.NewStore(options)\n    if err != nil {\n        panic(err)\n    }\n    logger := zap.NewExample()\n    stackService := stackconfig.StackService{\n        Store:  store,\n        Logger: logger,\n    }\n}\n')),(0,o.kt)("h3",{id:"example-with-postgresql"},"Example with postgresql"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/deqode/StackConfig/stackconfig"\n    "github.com/philippgille/gokv/postgresql"\n    "go.uber.org/zap"\n)\n\nfunction main() {\n    options := postgresql.DefaultOptions\n    store, err := postgresql.NewClient(options)\n    if err != nil {\n        panic(err)\n    }\n    logger := zap.NewExample()\n    stackService := stackconfig.StackService{\n        Store:  store,\n        Logger: logger,\n    }\n}\n')),(0,o.kt)("h3",{id:"example-with-s3"},"Example with s3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/deqode/StackConfig/stackconfig"\n    "github.com/philippgille/gokv/s3"\n    "go.uber.org/zap"\n)\n\nfunction main() {\n    options := s3.DefaultOptions\n    store, err := s3.NewClient(options)\n    if err != nil {\n        panic(err)\n    }\n    logger := zap.NewExample()\n    stackService := stackconfig.StackService{\n        Store:  store,\n        Logger: logger,\n    }\n}\n')),(0,o.kt)("h3",{id:"app-service-interface"},"App service Interface"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Stack Interface {\n    // used to validate an app config\n    ValidateAppConfig(app *pb.StackConfig) error\n    // save latest version of app config to key-value store\n    Save(app *pb.StackConfig) (*pb.StackConfig, error)\n    // get latest version of app config from key-value store\n    GetAppConfig(id string) (*pb.StackConfig, error)\n    // get app config corresponding to any available version from key-value store\n    GetAppConfigForVersion(id string, version int32) (*pb.StackConfig, error)\n}\n")))}u.isMDXComponent=!0}}]);